import React, { createContext, useState, useContext } from 'react';
// ðŸ’¥ MANTIDO: ImportaÃ§Ã£o do JSON
import musicasData from '../pages/musicas/musicas.json'; 

// 1. Cria o Contexto
const MusicPlayerContext = createContext();

// 2. Componente Provedor (Provider)
export const MusicPlayerProvider = ({ children }) => {
    
    // ðŸ’¥ ALTERAÃ‡ÃƒO 1: Define a primeira mÃºsica do JSON como a currentSong inicial
    const [currentSong, setCurrentSong] = useState(musicasData[0] || null); 
    const [isPlaying, setIsPlaying] = useState(false);

    // ðŸ’¥ ALTERAÃ‡ÃƒO 2: A funÃ§Ã£o agora recebe o ID e busca a mÃºsica na lista.
    const playSong = (songId) => {
        // Encontra a mÃºsica pelo ID
        const songToPlay = musicasData.find(song => song.id === songId);
        
        if (songToPlay) {
            // Define a mÃºsica encontrada como a atual
            setCurrentSong(songToPlay);
            // Inicia a reproduÃ§Ã£o
            setIsPlaying(true);
        } else {
            console.error(`MÃºsica com ID ${songId} nÃ£o encontrada.`);
        }
    };
    
    // FunÃ§Ã£o para alternar o estado de reproduÃ§Ã£o (INALTERADA)
    const togglePlayPause = () => {
        setIsPlaying(prev => !prev);
    };

    return (
        <MusicPlayerContext.Provider value={{ 
            // ðŸ’¥ NOVO: Exporta a lista completa de mÃºsicas
            musicas: musicasData,
            
            currentSong, 
            isPlaying, 
            
            // As funÃ§Ãµes de controle
            playSong, 
            togglePlayPause,
            
            // ðŸ’¥ EXTRAS (Opcional, mas Ãºtil): Para que outros componentes possam alterar a mÃºsica/status diretamente
            setCurrentSong,
            setIsPlaying,
        }}>
            {children}
        </MusicPlayerContext.Provider>
    );
};

// 3. Hook Personalizado para uso fÃ¡cil (INALTERADO)
export const useMusicPlayer = () => {
    return useContext(MusicPlayerContext);
};